/*
 * Websecbench is a suite of web security benchmarks generated by (CL)S.
 * Copyright (C) 2021  Jan Bessai and Malte Mues
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.combinators.websecbench.databaseinteraction

import com.github.javaparser.ast.body.MethodDeclaration
import com.github.javaparser.ast.expr.Expression
import org.combinators.cls.interpreter.ReflectedRepository
import org.combinators.templating.twirl.Java
import org.combinators.websecbench.{
  CodeGenerator,
  ComponentTag,
  Repository,
  SQLInjectionVulnerability,
  TaggedComponent
}
import org.combinators.websecbench.SemanticTypes.{JavaSQL, JavaString, JavaVoid}
import org.combinators.cls.types.syntax._

object ReadFromDatabase extends TaggedComponent {
  override val tags: Set[ComponentTag] = Set(ComponentTag.DatabaseIO)

  val readFromDatabase: MethodDeclaration = {
    Java(s"""
         |private void readFromDatabase(String sql, HttpServletResponse response) {
         |   try {
		     |    java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection();
         |    java.sql.CallableStatement statement = connection.prepareCall( sql );
         |    java.sql.ResultSet rs = statement.executeQuery();
         |    org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response);
         |   } catch (java.sql.SQLException e) {
         |    if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
         |	    response.getWriter().println("Error processing request.");
         |	    return;
         |    }
         |  }
         |}
         |""".stripMargin).methodDeclarations().head
  }

  def apply(sql: CodeGenerator[Expression]): CodeGenerator[Expression] = {
    sql.copy(
      methods = readFromDatabase +: sql.methods,
      currentNode = Java(
        s"readFromDatabase(${sql.currentNode}, ${CodeGenerator.responseExpr})"
      ).expression[Expression](),
      metaData = sql.metaData :+ SQLInjectionVulnerability(true)
    )
  }

  val semanticType = JavaSQL :&: JavaString =>: JavaVoid
  override def addToRepository(
      repository: ReflectedRepository[Repository.type]
  ): ReflectedRepository[Repository.type] = repository.addCombinator(this)
}
