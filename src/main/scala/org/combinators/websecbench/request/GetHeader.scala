/*
 * Websecbench is a suite of web security benchmarks generated by (CL)S.
 * Copyright (C) 2020  Jan Bessai and Malte Mues
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.combinators.websecbench.request

import com.github.javaparser.ast.expr.Expression
import org.combinators.templating.twirl.Java
import org.combinators.websecbench.{CodeGenerator, ComponentTag, PathTraversalVulnerability, Repository, SQLInjectionVulnerability, TaggedComponent, UncheckedString}
import org.combinators.websecbench.SemanticTypes.{Encoded, JavaString}
import SemanticTypes._
import com.github.javaparser.ast.body.MethodDeclaration
import org.combinators.cls.interpreter.ReflectedRepository
import org.combinators.cls.types.Type
import org.combinators.cls.types.syntax._

object GetHeader extends TaggedComponent {
  val tags = Set(ComponentTag.ReadFromRequest)

  val getCookieMethod: MethodDeclaration = Java(
      s"""
         |public String getHeader(HttpServletRequest request) throws IOException {
         |  String param = "";
         |	if (request.getHeader("BenchmarkTest00008") != null) {
         |    param = request.getHeader("BenchmarkTest00008");
         |  }
         |  return param;
         |}
         |""".stripMargin).methodDeclarations().head

  def apply(): CodeGenerator[Expression] = {
    CodeGenerator(
      methods = List(getCookieMethod),
      currentNode = Java(s"getHeader(${CodeGenerator.requestExpr})").expression[Expression](),
      toMethodBody = expr => Java(s"${expr};").statements(),
      unitTests = Seq.empty,
      metaData =  Seq.empty,
      sourceData = Seq(UncheckedString())
      )
  }

  val semanticType: Type = RequestContent :&: JavaString :&: Encoded

  def addToRepository(repository: ReflectedRepository[Repository.type]): ReflectedRepository[Repository.type] =
    repository.addCombinator(this)
}
